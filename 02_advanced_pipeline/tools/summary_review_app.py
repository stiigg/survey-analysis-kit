"""Streamlit dashboard to review and annotate generated summaries."""

from __future__ import annotations

import json
from pathlib import Path
from typing import List
import streamlit as st

from surveykit.summary_writer import SummaryDocument, SummaryFinding


def load_summary(path: Path) -> SummaryDocument:
    data = json.loads(path.read_text(encoding="utf-8"))
    doc = SummaryDocument()
    for item in data:
        doc.add(SummaryFinding(topic=item["topic"], text=item["text"], evidence=item["evidence"], severity=item["severity"]))
    return doc


def main(summary_path: Path, feedback_log: Path) -> None:
    st.title("Executive Summary Review")
    st.caption("Approve or comment on autogenerated insights before delivery.")

    if not summary_path.exists():
        st.error(f"Summary file not found: {summary_path}")
        return

    doc = load_summary(summary_path)

    feedback_entries: List[dict] = []
    for finding in doc.findings:
        with st.expander(finding.topic):
            st.markdown(finding.text)
            st.json(finding.evidence)
            status = st.selectbox(
                "Status", ["approved", "needs_revision", "client_comment"], key=f"status_{finding.topic}"
            )
            comment = st.text_area("Comments", key=f"comment_{finding.topic}")
            if st.button("Save", key=f"save_{finding.topic}"):
                feedback_entries.append({"topic": finding.topic, "status": status, "comment": comment})
                st.success("Saved")

    if feedback_entries:
        feedback_log.parent.mkdir(parents=True, exist_ok=True)
        if feedback_log.exists():
            existing = json.loads(feedback_log.read_text(encoding="utf-8"))
        else:
            existing = []
        existing.extend(feedback_entries)
        feedback_log.write_text(json.dumps(existing, indent=2), encoding="utf-8")
        st.success("Feedback written")


if __name__ == "__main__":  # pragma: no cover
    summary_file = Path(st.experimental_get_query_params().get("summary", ["outputs/summary.json"])[0])
    feedback_file = Path(st.experimental_get_query_params().get("feedback", ["outputs/summary_feedback.json"])[0])
    main(summary_file, feedback_file)
